### Greatest Common Divisor.
(bind gcd (func (x y)
	(if (= y 0)
		x
		(gcd y (% x y))
	)
))

### Least Common Multiple.
(bind lcm (func (x y)
	(* (/ x (gcd x y)) y)
))

### Finds the minimum element in an array with a custom comparator.
(bind min-element-cmp (func (x cmp) (do

    (bind min-element-impl (func (element x)
        (if (empty x)
            element
            (if (cmp element (car x))
                (min-element-impl element (cdr x))
                (min-element-impl (car x) (cdr x))
            )
        )
    ))

    (if (= (length x) 1)
        (car x)
        (min-element-impl (car x) (cdr x))
    )

)))

### Finds the minimum element in an array with a default comparator: less than.
(bind min-element (func (x) (min-element-cmp x <)))

### Merges two sorted arrays into a sorted array with a custom comparator.
(bind merge-cmp (func (x y cmp) (do
    (bind merge-impl (func (x y result) (do
        (bind x-empty (empty x))
        (bind y-empty (empty y))
        (if x-empty
            (if y-empty
                result
                (cat result y)
            )
            (if y-empty
                (cat result x)
                (if (cmp (car x) (car y))
                    (merge-impl (cdr x) y (cat result [(car x)]))
                    (merge-impl x (cdr y) (cat result [(car y)]))
                )
            )
        )
    )))
    (merge-impl x y [])
)))

### Merges two sorted arrays into a sorted array.
### A default comparator less than assumed.
(bind merge (func (x y) (merge-cmp x y <)))

### Sorts an array with a custom comparator.
(bind sort-cmp (func (x cmp) (do
    (bind len (length x))
    (bind half-len (/ len 2))
    (if (<= len 1)
        x
        (merge-cmp
            (sort (slice x 0 half-len))
            (sort (slice x half-len len))
            cmp
        )
    )
)))

### Sorts an array with a default comparator: less than.
(bind sort (func (x) (sort-cmp x <)))
